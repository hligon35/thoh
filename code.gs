// Google Apps Script (Code.gs)
// Sends contact form submissions to bcharles@thehouseofhumanity.org
// Attempts to send FROM the alias info@thehouseofhumanity.org if it's configured in Gmail.
// If the alias isn't configured, it will send from the script owner's address with replyTo set.

const RECIPIENT_EMAIL = 'bcharles@thehouseofhumanity.org';
const FROM_ALIAS = 'info@thehouseofhumanity.org';
const SENDER_NAME = 'The House Of Humanity';

function doPost(e) {
  try {
    const p = (e && e.parameter) || {};

    // Honeypot: if populated, silently succeed without sending
    if ((p.website || '').trim() !== '') {
      return text_('OK');
    }

    // Gather fields
    const name = (p.Name || '').trim();
    const email = (p.Email || '').trim();
    const phone = (p.Phone || '').trim();
    const topic = (p.Topic || '').trim();
    const message = (p.Message || '').trim();
    const pageURL = (p.PageURL || '').trim();
    const subjectIn = (p.Subject || '').trim();

    const subject = subjectIn || `New Contact Form: ${topic || 'General Inquiry'}`;

    const htmlBody = buildHtmlEmail_({ name, email, phone, topic, message, pageURL });
    const textBody = buildTextEmail_({ name, email, phone, topic, message, pageURL });

    // Prepare options
    const opts = {
      name: SENDER_NAME,
      htmlBody,
      replyTo: email || FROM_ALIAS
    };

    // Use alias if configured in the Gmail account that owns this script
    try {
      const aliases = GmailApp.getAliases();
      if (aliases && aliases.indexOf(FROM_ALIAS) !== -1) {
        opts.from = FROM_ALIAS;
      }
    } catch (aliasErr) {
      // If alias check fails (insufficient permission or consumer account), just ignore
      console.warn('Alias check failed:', aliasErr);
    }

    GmailApp.sendEmail(RECIPIENT_EMAIL, subject, textBody, opts);

    // Optional: log minimal info
    console.log(`Contact form sent: topic="${topic}" from="${email}"`);

    return text_('OK');
  } catch (err) {
    console.error('doPost error:', err);
    return text_('ERROR');
  }
}

function doGet() {
  return text_('OK');
}

function buildHtmlEmail_({ name, email, phone, topic, message, pageURL }) {
  const esc = (s) => String(s || '').replace(/[&<>"']/g, (c) => ({
    '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'
  }[c]));
  return `
    <div style="font-family:Arial,Helvetica,sans-serif;line-height:1.6;font-size:14px;color:#111;">
      <h2 style="margin:0 0 12px 0;color:#02c9aa;">New Contact Form Submission</h2>
      <table cellpadding="0" cellspacing="0" border="0" style="width:100%;max-width:680px;border-collapse:collapse;">
        <tr><td style="padding:6px 0;"><strong>Name:</strong> ${esc(name)}</td></tr>
        <tr><td style="padding:6px 0;"><strong>Email:</strong> <a href="mailto:${esc(email)}">${esc(email)}</a></td></tr>
        ${phone ? `<tr><td style="padding:6px 0;"><strong>Phone:</strong> <a href="tel:${esc(phone)}">${esc(phone)}</a></td></tr>` : ''}
        ${topic ? `<tr><td style="padding:6px 0;"><strong>Topic:</strong> ${esc(topic)}</td></tr>` : ''}
        ${pageURL ? `<tr><td style="padding:6px 0;"><strong>Page URL:</strong> <a href="${esc(pageURL)}">${esc(pageURL)}</a></td></tr>` : ''}
        <tr><td style="padding:12px 0;"><strong>Message:</strong><br>
          <div style="white-space:pre-wrap;border:1px solid #eee;padding:10px;border-radius:6px;background:#fafafa;">${esc(message)}</div>
        </td></tr>
      </table>
      <p style="margin-top:16px;color:#555;">This email was generated by the website contact form.</p>
    </div>
  `;
}

function buildTextEmail_({ name, email, phone, topic, message, pageURL }) {
  const lines = [
    'New Contact Form Submission',
    '----------------------------------------',
    `Name: ${name || ''}`,
    `Email: ${email || ''}`,
    phone ? `Phone: ${phone}` : null,
    topic ? `Topic: ${topic}` : null,
    pageURL ? `Page URL: ${pageURL}` : null,
    '',
    'Message:',
    message || '',
  ].filter(Boolean);
  return lines.join('\n');
}

function text_(s) {
  return ContentService.createTextOutput(String(s)).setMimeType(ContentService.MimeType.TEXT);
}